# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.199.0"

# Disable Fastlane crash reporting because we're using UI.* methods for our custom errors and those aren't Fastlane bugs.
opt_out_usage

# Require Fastlane's UI to handle log messages. To be sure which method you should use check: https://github.com/fastlane/fastlane/blob/master/fastlane_core/lib/fastlane_core/ui/interface.rb
require 'fastlane_core/ui/ui.rb'


before_all do
    require 'rake'
    require_relative 'helper/ci_helper.rb'
end

desc 'Start here, create a version from develop or release branch'
lane :create_version do
    current_branch = git_branch

    if current_branch == "develop"
        create_version_from_develop
    else
        create_version_from_release
    end
end

desc 'Start here, this lane goes through the different ones'
lane :start_deploy do
    
    unless CIHelper::has_deploy_message?
        UI.message '[!] User did not request a deploy'
        next
    end

    deploy_lib
end

desc 'Deploy to Github And CocoaPods'
lane :deploy_lib do
    unless CIHelper::is_running_in_ci?
        UI.error 'Not running in CI environment. Local run not yet supported'
    end

    UI.message 'Checking pod version'
    # All submodules should have the same version, so I take the version from the first module
    pod_version = CIHelper::spec_version()

    # Checks if all conditions are met in in order to release de library
    unless CIHelper::can_deploy_library?(pod_version)
        UI.user_error! 'Fix above errors and try again'
    end
    UI.success 'Repo check complete'

    # deploy_public
    deploy_private

end

desc 'Publish public lib'
lane :deploy_public do
    
    UI.message 'Checking public pod version'
    # All submodules should have the same version, so I take the version from the first module
    pod_version = CIHelper::spec_version()

    if CIHelper::tag_already_exists(pod_version)
        UI.user_error! "[!] A tag for version #{pod_version} already exists. Please change the version to public publish and try again\n"
    end

    UI.message "Creating release #{pod_version} in GitHub"
    release_notes = read_changelog(section_identifier: "[#{pod_version}]")
    set_github_release(
        repository_name: 'mercadopago/px-ios',
        api_token: CIHelper::GITHUB_TOKEN,
        name: "Release v#{pod_version}",
        tag_name: "#{pod_version}",
        description: release_notes,
        commitish: last_git_commit()[:commit_hash]
    )
    UI.success 'Release created'

    UI.message 'Publishing public pod'
    pod_push(path: "MercadoPagoSDKV4.podspec", allow_warnings: true)
    UI.success 'Pod publicly published successfully'
    communicate_build_to_slack(
      enviroment: "Public"
    )

end

desc 'Publish private lib'
lane :deploy_private do

    #new_spec_path = "#{CIHelper::BUILD_DIR}/MercadoPagoSDKV4.podspec"
    #unless File.exist?(new_spec_path)
        #UI.user_error! "No private spec file found in: '#{new_spec_path}'"
    #end
    #File.rename new_spec_path, "#{CIHelper::BUILD_DIR}/MercadoPagoSDKV4.podspec"

    UI.message 'Checking private pod version'
    # All submodules should have the same version, so I take the version from the first module
    pod_version = CIHelper::spec_version()

    if CIHelper::tag_already_exists(pod_version)
        UI.user_error! "[!] A tag for version #{pod_version} already exists. Please change the version to private publish and try again\n"
    end

    UI.message "Creating release #{pod_version} in GitHub"
    release_notes = read_changelog(section_identifier: "[#{pod_version}]")
    set_github_release(
        repository_name: 'mercadopago/px-ios',
        api_token: CIHelper::GITHUB_TOKEN,
        name: "Release Private v#{pod_version}",
        tag_name: "#{pod_version}",
        description: release_notes,
        commitish: last_git_commit()[:commit_hash]
    )
    UI.success 'Release created'

    UI.message 'Publishing private pod'
    CIHelper::push_pod("MercadoPagoSDKV4")
    UI.success 'Pod privately published successfully'
    communicate_build_to_slack(
      enviroment: "Private"
    )
end

lane :pr_check do
  cocoapods(
    clean_install: true,
    podfile: "./ExampleSwift/Podfile"
  )
  run_tests(
    workspace: "ExampleSwift/ExampleSwift.xcworkspace",
    scheme: "ExampleSwift"
  )
  danger(
    danger_id: "danger_pr",
    verbose: true,
    github_api_token: ENV["GITHUB_API_TOKEN"]
  )
end

lane :integration_tests do
  cocoapods(
    clean_install: true,
    podfile: "./ExampleSwift/Podfile"
  )
  match(app_identifier: "com.mercadolibre.*", type: "development", readonly: true)
  gym
  sh "bash ./scripts/saucelabs.sh"
end

lane :build_example_local do
  xcodebuild(
    {
      clean: true,
      build: true,
      derivedDataPath: "./ExampleSwift/build",
      workspace: "./ExampleSwift/ExampleSwift.xcworkspace",
      output_name: "ExampleSwift.app",
      scheme: "ExampleSwift",
      sdk: "iphonesimulator",
      xcargs: "ONLY_ACTIVE_ARCH=NO"
    }
  )
end

lane :communicate_build_to_slack do |options|
    pod_version = CIHelper::spec_version()
    slack(
      message: "üï∫ Lib de PX publicada üíÉ",
      username: 'Release PX',
      default_payloads: [:git_author],
      attachment_properties: {
        fields: [
              {
                title: "üì≤Lib Version Number",
                value: pod_version
              },{
                title: "üöÄEntorno",
                value: options[:enviroment]
              },{
                title: "üìùWhat¬¥s new? RC Notes",
                value: "https://github.com/mercadopago/px-ios/releases/tag/#{pod_version}"
              }
            ]
      }
    )
  end

def create_version_from_release
  ensure_git_branch(
   branch: '^release\/[0-9]+\.[0-9]+\.[0-9]+$'
  )
  current_version = git_branch.delete_prefix("release/")
  UI.message("current_version: #{current_version}")

  create_version_from(current_version)
end

def create_version_from_develop
    last_tag_version = get_last_tag_version
    UI.message("last_tag_version: #{last_tag_version}")

    new_version = bump(last_tag_version, "minor")
    UI.message("new_version: #{new_version}")

    create_version_from(new_version)
end

def create_version_from(new_version)
    changelog = read_changelog(section_identifier: "[Unreleased]")
    unless !changelog.empty?
        UI.user_error!("Nothing to release, check changelog under [Unreleased]")
    end

    stamp_changelog(
        section_identifier: new_version, 
        should_stamp_date: true
    )
    version_bump_podspec(
        path: "MercadoPagoSDKV4.podspec",
        version_number: new_version
    )
    git_commit(
        path: ["./CHANGELOG.md", "MercadoPagoSDKV4.podspec"],
        message: "Release #{new_version}"
    )
    
    # trigger release in CI
    sh("git", "commit", "-m", "[ci deploy]", "--allow-empty")

    push_to_git_remote(
        remote_branch: "release/#{new_version}",
        tags: true
    )
    create_pull_request(
        repo: "mercadopago/px-ios",
        title: "Release #{new_version}",
        base: "release/#{new_version}",
        body: changelog
    )
end

def get_last_tag_version
  sh("git", "fetch", "--tags")
  last_version = git_tags
    .select { |tag| /^[0-9]+\.[0-9]+\.[0-9]+$/.match?(tag) }
    .sort_by { |v| Gem::Version.new(v) }
    .last

  return last_version
end

def bump(version, type)
  separator = "."
  splited_version = version.split(separator).map(&:to_i)

  if splited_version.length < 3
    return ""
  end

  case type
  when "major"
    splited_version[0] += 1
    splited_version[1] = 0
    splited_version[2] = 0
  when "minor"
    splited_version[1] += 1
    splited_version[2] = 0
  when "patch"
    splited_version[2] += 1
  else
    return ""
  end

  return splited_version.join(separator)
end